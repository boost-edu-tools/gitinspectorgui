# GitLab CI/CD Pipeline for GitInspectorGUI
# Builds cross-platform releases for Windows, macOS, and Linux

stages:
  - test
  - build
  - release

variables:
  CARGO_HOME: $CI_PROJECT_DIR/.cargo
  CARGO_TARGET_DIR: $CI_PROJECT_DIR/target

# Cache configuration
.cache_template: &cache_template
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .cargo/
      - target/
      - node_modules/
      - python/.venv/

# Test stage
test:
  stage: test
  image: node:20
  <<: *cache_template
  before_script:
    - apt-get update -qq && apt-get install -y -qq git curl build-essential
    - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    - source $HOME/.cargo/env
    - curl -LsSf https://astral.sh/uv/install.sh | sh
    - export PATH="$HOME/.cargo/bin:$PATH"
  script:
    - npm ci
    - npm run build
    - cd python && uv sync && cd ..
    - echo "‚úÖ Frontend and Python backend tests passed"
  only:
    - merge_requests
    - main

# Build for Linux x64
build:linux:
  stage: build
  image: ubuntu:22.04
  <<: *cache_template
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq git curl build-essential libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
    - curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
    - apt-get install -y nodejs
    - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    - source $HOME/.cargo/env
    - curl -LsSf https://astral.sh/uv/install.sh | sh
    - export PATH="$HOME/.cargo/bin:$PATH"
  script:
    - npm ci
    - npm run build
    - cd python && uv sync && cd ..
    - cargo install tauri-cli
    - cargo tauri build --target x86_64-unknown-linux-gnu
    - mkdir -p dist/linux
    - find src-tauri/target -name "*.deb" -exec cp {} dist/linux/ \;
    - find src-tauri/target -name "*.AppImage" -exec cp {} dist/linux/ \;
  artifacts:
    paths:
      - dist/linux/
    expire_in: 1 week
  only:
    - tags
    - main

# Build for Windows x64 (using Wine on Linux)
build:windows:
  stage: build
  image: ubuntu:22.04
  <<: *cache_template
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq git curl build-essential wine64 mingw-w64
    - curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
    - apt-get install -y nodejs
    - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    - source $HOME/.cargo/env
    - rustup target add x86_64-pc-windows-gnu
    - curl -LsSf https://astral.sh/uv/install.sh | sh
    - export PATH="$HOME/.cargo/bin:$PATH"
  script:
    - npm ci
    - npm run build
    - cd python && uv sync && cd ..
    - cargo install tauri-cli
    - cargo tauri build --target x86_64-pc-windows-gnu
    - mkdir -p dist/windows
    - find src-tauri/target -name "*.exe" -exec cp {} dist/windows/ \;
    - find src-tauri/target -name "*.msi" -exec cp {} dist/windows/ \;
  artifacts:
    paths:
      - dist/windows/
    expire_in: 1 week
  only:
    - tags
    - main
  allow_failure: true  # Windows cross-compilation can be tricky

# Build Python wheel
build:python:
  stage: build
  image: python:3.11
  <<: *cache_template
  before_script:
    - curl -LsSf https://astral.sh/uv/install.sh | sh
    - export PATH="$HOME/.cargo/bin:$PATH"
  script:
    - cd python
    - uv sync
    - uv build
    - mkdir -p ../dist/python
    - cp dist/*.whl ../dist/python/
    - cp dist/*.tar.gz ../dist/python/
  artifacts:
    paths:
      - dist/python/
    expire_in: 1 week
  only:
    - tags
    - main

# Release stage - create GitLab release
release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  dependencies:
    - build:linux
    - build:windows
    - build:python
  script:
    - echo "Creating GitLab release for $CI_COMMIT_TAG"
    - |
      if [ -d "dist" ]; then
        find dist -type f -exec sha256sum {} \; > dist/checksums.sha256
      fi
  release:
    name: 'GitInspectorGUI $CI_COMMIT_TAG'
    description: |
      üéâ **GitInspectorGUI $CI_COMMIT_TAG**
      
      ## üöÄ Phase 3: Advanced Features Release
      
      ### ‚ú® New Features
      - üéØ Interactive table enhancements with cell editing and row expansion
      - üïí Blame history navigation with commit timeline
      - üìä Advanced data visualization and filtering
      - üí¨ Comment line toggle functionality
      - üîç Dynamic table updates based on selected commits
      
      ### üì¶ Downloads
      - **Linux**: `.deb` and `.AppImage` packages
      - **Windows**: `.exe` and `.msi` installers (experimental)
      - **Python CLI**: Wheel package for pip installation
      
      ### üîß Installation
      
      **Desktop Application:**
      - Linux: Download and install the `.deb` package or run the `.AppImage`
      - Windows: Download and run the `.exe` or `.msi` installer
      
      **Python CLI:**
      ```bash
      pip install gitinspectorgui-$CI_COMMIT_TAG-py3-none-any.whl
      ```
      
      ### üìã System Requirements
      - **Linux**: Ubuntu 20.04+ or equivalent
      - **Windows**: Windows 10+ (experimental support)
      - **Python**: Python 3.8+ for CLI version
      
      ### üêõ Known Issues
      - Windows builds are experimental and may have compatibility issues
      - macOS builds require manual compilation (coming in future releases)
      
      ---
      
      **Full Changelog**: See commit history for detailed changes
      **Documentation**: Check the README.md for usage instructions
    tag_name: $CI_COMMIT_TAG
    assets:
      links:
        - name: 'Linux .deb Package'
          url: '$CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_TAG/browse/dist/linux?job=build:linux'
          filepath: '/dist/linux/'
        - name: 'Windows Installer'
          url: '$CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_TAG/browse/dist/windows?job=build:windows'
          filepath: '/dist/windows/'
        - name: 'Python Wheel'
          url: '$CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_TAG/browse/dist/python?job=build:python'
          filepath: '/dist/python/'
        - name: 'Checksums'
          url: '$CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_TAG/file/dist/checksums.sha256?job=release'
  only:
    - tags

# Manual deployment job for testing
deploy:manual:
  stage: release
  image: alpine:latest
  dependencies:
    - build:linux
    - build:python
  script:
    - echo "Manual deployment triggered"
    - echo "Artifacts available for download"
    - ls -la dist/ || echo "No dist directory found"
  artifacts:
    paths:
      - dist/
    expire_in: 1 month
  when: manual
  only:
    - main

# Cleanup job
cleanup:
  stage: release
  image: alpine:latest
  script:
    - echo "Cleaning up old artifacts..."
    - echo "This job can be extended to clean up old releases"
  when: manual
  only:
    - main